# Julia snipppets
# =============================================================================

# Auxiliary functions
# =============================================================================

global !p
"""
Function to remove all spaces and line breaks from the function definition.
"""
def julia_func_decl_oneline(func_decl):
	output = re.sub('\s+', ' ', func_decl).strip()

	# If the first word is `function`, then just remove it.
	output = re.sub('^function ', '', output)

	# If the first word is `macro`, then replace it with `@`.
	output = re.sub('^macro ', '@', output)

	# If there is a `) =`, then it should be a one-line declaration. In this case,
	# remove everything after it.
	output = re.sub('\)[\s].*=.*$', ')', output)

	return output.strip()

"""
Function to separate the arguments of the function definition.
"""
def get_julia_args(func_decl):
	# Remove all spaces and line breaks from the function definition.
	line = julia_func_decl_oneline(func_decl)

	# Remove everything between {}.
	linep = re.sub('{[^>{}]+}', '', line)

	# Tokenize the arguments.
	args = ((linep.split('(',1)[1]).split(')',1)[0]).split(',')

	# Organize the arguments.
	output = ""
	if (len(args) > 1) or ( (len(args) == 1) and (len(args[0]) > 0) ):
		for a in args:
			output += "* `" + a.strip() + "`: <++>\n"
	else:
		output += "\n"

	return output
endglobal

# Function comments
# =============================================================================

snippet jlc "Julia function comment"
"""
    $1`!p snip.rv = julia_func_decl_oneline(snip.v.text)`

$2

# Args

$3`!p snip.rv = get_julia_args(snip.v.text)`
# Returns

* $4

"""
${VISUAL}$0
endsnippet

snippet jlcna "Julia function comment without args"
"""
    $1`!p snip.rv = julia_func_decl_oneline(snip.v.text)`

$2

# Returns

* $3

"""
${VISUAL}$0
endsnippet

snippet jlcnr "Julia function comment without returns"
"""
    $1`!p snip.rv = julia_func_decl_oneline(snip.v.text)`

$2

# Args

$3`!p snip.rv = get_julia_args(snip.v.text)`
"""
${VISUAL}$0
endsnippet

snippet jlcnar "Julia function comment without args, and returns"
"""
    $1`!p snip.rv = julia_func_decl_oneline(snip.v.text)`

$2

"""
${VISUAL}$0
endsnippet
